@page "/"

@rendermode InteractiveServer

<MudStack AlignItems="AlignItems.Center">
    <MudForm @ref="_form">
        <MudTextField
            Immediate="true"
            Clearable="true"
            AutoFocus="true"
            Variant="Variant.Outlined"
            Class="mb-2"
            @bind-Value="@_target"
            T="String"
            Placeholder="Long url"
        />
    </MudForm>

    <MudButton
        StartIcon="@Icons.Material.Filled.Compress"
        Class="mb-5 py-2 px-4"
        OnClick="@Submit"
        Color="Color.Primary"
        Variant="Variant.Filled"
    >
        Shorten
    </MudButton>

    @if (_hash != "")
    {
        <MudPaper Class="pl-7 pr-4">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudText>
                    <MudLink Href="@_hash" Underline="Underline.Always">/@_hash</MudLink>
                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="@Copy" />
            </MudStack>
        </MudPaper>
    }

    <MudButton
        StartIcon="@Icons.Material.Filled.Star"
        Href="/top"
        Class="mt-8 py-2 px-6"
        Color="Color.Info"
        Variant="Variant.Filled"
    >
        Urls
    </MudButton>

</MudStack>

@inject IJSRuntime Js
@inject HttpClient Http
@inject IWebHostEnvironment Env

@code
{
    private MudForm _form;
    private bool _loading;

    private string _target = "";
    private string _hash = "";

    private async Task Copy()
    {
        var url = Env.IsDevelopment() ? "http://localhost:6001" : "https://uxl.zaqbit.com";
        await Js.InvokeVoidAsync("navigator.clipboard.writeText", $"{url}/{_hash}");
    }

    private async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        if (!_target.StartsWith("https://"))
        {
            await _form.ResetAsync();
            _target = "";
            StateHasChanged();
            return;
        }

        _loading = true;
        var data = new ShortenUrlIn { Target = _target };
        var response = await Http.PostAsJsonAsync("/urls", data);

        if (response.IsSuccessStatusCode)
        {
            var responseAsString = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<UrlOut>(responseAsString)!;
            _hash = result.Hash;
        }

        _loading = false;
    }
}
